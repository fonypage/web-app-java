-- V6__insert_topic_methods.sql
-- Тема “Методы в Java”
INSERT INTO topic (title, content, type, video_url) VALUES
(
  'Методы в Java',
  '<p>Методы в Java представляют собой именованные блоки кода, отвечающие за выполнение конкретных операций. Они позволяют структурировать программу, выделять повторяющиеся участки в обособленные единицы, облегчать поддержку и тестирование. Благодаря методам можно соблюдать принцип единственной ответственности: каждый метод решает одну задачу и не зависит от внешнего контекста.</p>

  <p>При объявлении метода необходимо указать его <strong>имя</strong>, <strong>возвращаемый тип</strong> (или <code>void</code>, если метод ничего не возвращает) и <strong>список параметров</strong> через запятую. Параметры передаются в метод <strong>по значению</strong>, что особенно важно при работе с примитивными типами и ссылочными объектами. Модификаторы доступа (<code>public</code>, <code>private</code>, <code>protected</code>) определяют, откуда метод может быть вызван.</p>

  <p><strong>Статические методы</strong> (с ключевым словом <code>static</code>) принадлежат самому классу и могут вызываться без создания экземпляра. <strong>Нестатические методы</strong> требуют предварительного создания объекта. Перегрузка методов позволяет определять несколько версий метода с одним именем, но разными типами или количеством параметров — компилятор автоматически выберет подходящий вариант.</p>

  <p><strong>Рекурсия</strong> — техника, когда метод вызывает сам себя. Она удобна для решения задач с естественной иерархической структурой (факториал, обход деревьев), но требует жёсткого контроля базового условия, чтобы избежать бесконечного рекурсивного цикла и переполнения стека.</p>

  <p>Для документирования методов используются Javadoc-комментарии (<code>/&#42;&#42; ... &#42;/</code>), из которых автоматически генерируется API-документация. Это помогает поддерживать код в понятном виде и облегчает работу команды.</p>

  <h3>Пример кода</h3>
  <pre><code>public class Calculator {
    // простой метод сложения
    public int add(int a, int b) {
        return a + b;
    }

    // перегруженный метод для дробных чисел
    public double add(double a, double b) {
        return a + b;
    }

    // рекурсивный метод вычисления факториала
    public int factorial(int n) {
        if (n <= 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }

    // пример использования
    public static void main(String[] args) {
        Calculator calc = new Calculator();
        System.out.println("Sum (int): " + calc.add(5, 3));
        System.out.println("Sum (double): " + calc.add(2.5, 3.5));
        System.out.println("Factorial 5: " + calc.factorial(5));
    }
}</code></pre>',
  'theory',
  'https://www.youtube.com/watch?v=d5MOz3u2bBc'
);